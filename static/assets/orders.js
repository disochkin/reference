    let currentPage = 1;
  const itemsPerPage = 5;
  const table = document.getElementById("ordersTable");


  async function loadPage(page) {
    const skip = (page - 1) * itemsPerPage;
    const res = await fetch(`/api/order?skip=${skip}&limit=${itemsPerPage}`);
    const data = await res.json();
    renderTable(data);
  }

  function renderTable(_items) {
    const tbody = document.querySelector("#orderTable tbody");
    tbody.innerHTML = "";
    for (const item of _items.items) {
      const row = document.createElement("tr");
      row.innerHTML = `
        <td>${item.id}</td>
        <td>${item.customer.name}</td>
        <td>${item.manager.name}</td>
        <td>${item.created_at}</td>
        <td>${item.total_sum}</td>
        <td>${item.status}</td>
        <td class="actions">
              <button onclick="openEditModal(${item.id})">‚úèÔ∏è</button>
              <button onclick="deleteOrder(${item.id})">üóë</button>
        </td>
      `
      tbody.appendChild(row);
    }
    totalPages = Math.ceil(_items.total / itemsPerPage);
    document.getElementById("pageInfo").textContent = `–°—Ç—Ä–∞–Ω–∏—Ü–∞ ${currentPage} –∏–∑ ${totalPages}`;
    document.getElementById("prevPage").disabled = currentPage === 1;
    document.getElementById("nextPage").disabled = currentPage === totalPages;
  }

  document.getElementById("prevPage").addEventListener("click", () => {
    if (currentPage > 1) {
      currentPage--;
      loadPage(currentPage);
    }
  });

  document.getElementById("nextPage").addEventListener("click", () => {
    currentPage++;
    loadPage(currentPage);
  });

  // –ø–µ—Ä–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞
  loadPage(currentPage);

    const modal = document.getElementById('modalCreate');
      const openBtn = document.getElementById('openModalBtn');
      const closeBtn = document.getElementById('closeModalBtn');
      const saveBtn = document.getElementById('saveBtn');
      const managerSelect = document.getElementById('managerSelect');
      const customerSelect = document.getElementById('customerSelect');


      // –æ—Ç–∫—Ä—ã—Ç—å –æ–∫–Ω–æ
      openBtn.onclick = async () => {
        modal.style.display = 'flex';
        await loadManagers();  // –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
        await loadCustomers();  // –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π
      };

      // –∑–∞–∫—Ä—ã—Ç—å –æ–∫–Ω–æ
      closeBtn.onclick = () => modal.style.display = 'none';

      // –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
      async function loadManagers() {
        const res = await fetch('/api/manager');
        const data = await res.json();
        managerSelect.innerHTML = '';
        data.forEach(s => {
          const opt = document.createElement('option');
          opt.value = s.id;
          opt.textContent = s.name;
          managerSelect.appendChild(opt);
        });
      }

      async function loadCustomers() {
        const res = await fetch('/api/customer');
        const data = await res.json();
        customerSelect.innerHTML = '';
        data.forEach(s => {
          const opt = document.createElement('option');
          opt.value = s.id;
          opt.textContent = s.name;
          customerSelect.appendChild(opt);
        });
      }

      // —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–∫–∞–∑
      saveBtn.onclick = async () => {
        const payload = {
          manager_id: parseInt(managerSelect.value),
          customer_id: parseInt(customerSelect.value)
        };

        const res = await fetch('/api/order/create', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(payload)
        });

        if (res.ok) {
          alert('–ó–∞—è–≤–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!');
          modal.style.display = 'none';
          location.reload();
        } else {
          alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏');
        }
      };


  async function deleteOrder(id) {
        if (!confirm("–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –∑–∞–∫–∞–∑?")) {
        return; // –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª ¬´–û—Ç–º–µ–Ω–∞¬ª
        }

          try {
            const response = await fetch(`/api/order/${id}`, { method: "DELETE" });

            if (response.status === 200) {
              // –Ω–∞–ø—Ä–∏–º–µ—Ä, –±–µ–∫–µ–Ω–¥ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç JSON —Å –¥–∞–Ω–Ω—ã–º–∏ —É–¥–∞–ª—ë–Ω–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞
              const data = await response.json();
              alert(`–û–±—ä–µ–∫—Ç "${data.name}" (ID: ${data.id}) —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω.`);
              location.reload(); // –º–æ–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É
            }
            else if (response.status === 409) {
              const error = await response.text();
              alert(`–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å: ${error || "–µ—Å—Ç—å —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏."}`);
            }
            else {
              alert(`–û—à–∏–±–∫–∞: ${response.status} ${response.statusText}`);
            }
          }
          catch (err) {
            alert("–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: " + err.message);
          }

            };



  async function openEditModal(id) {
      const modal = document.getElementById("modalEdit");
      const addEquipmentBtn = document.getElementById('addEquipmentBtnForm');

      // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–∞
      const res = await fetch(`/api/order/${id}/items`);
      const data = await res.json();
      document.getElementById("orderIdFormModal").value = data.id;

      document.getElementById("orderCreatedFormModal").value = data.created_at;

      document.getElementById("customerFormModal").value = data.customer.name;
      document.getElementById("managerFormModal").value = data.manager.name;
      document.getElementById("orderStatusFormModal").value = data.status;
      document.getElementById("totalAmount").value = data.total_amount;

      modal.style.display = "block";
      renderOrderItemTable(data.id, data);
      loadEquipment();
    };

      function renderOrderItemTable(orderId, _items) {
        const tbody = document.querySelector("#orderItemTable tbody");
        tbody.innerHTML = "";
        for (const orderItem of _items.order_items) {
          const row = document.createElement("tr");
          row.innerHTML = `
            <td>${orderItem.id}</td>
            <td>${orderItem.equipment.name}</td>
            <td>${orderItem.price_per_unit}</td>
            <td>${orderItem.quantity}</td>
            <td>${orderItem.total_price}</td>

            <td class="actions">
               <button onclick="deleteOrderItem(${orderId}, ${orderItem.id})">üóë</button>
            </td>
          `
          tbody.appendChild(row);
        }
}

     // –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è + —Ü–µ–Ω–∞
      async function loadEquipment() {
        const res = await fetch('/api/equipment');
        const data = await res.json();
        equipmentSelect = document.getElementById("equipmentSelectEditOrderForm");
        price = document.getElementById("price")
        equipmentSelect.innerHTML = '';
        data.items.forEach(s => {
          const opt = document.createElement('option');
          opt.value = s.id;
          opt.textContent = s.name;
          equipmentSelect.appendChild(opt);
        });
      }

//        document.addEventListener('DOMContentLoaded', () => {
//            setupPriceUpdater(document.getElementById('equipmentSelectEditOrderForm'), document.getElementById('price-field'));
//        });

        // –ü–µ—Ä–µ–¥–∞—á–∞ —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤ DOM –∏ –ø—Ä–æ–¥—É–∫—Ç–∞ –ø—Ä—è–º–æ –≤ —Ñ—É–Ω–∫—Ü–∏—é
//        async function setupPriceUpdater(productSelect, priceField) {
//            const res = await fetch('/api/equipment');
//            const data = await res.json();
//            console.log(data.items);
//
//            productSelect.addEventListener('change', () => {
//                const selectedProductID = productSelect.value;
//                if (!selectedProductID) {
//                    priceField.textContent = '';
//                    return;
//                }
//              //  const selectedProduct = data[selectedProductID];
//               priceField.textContent = findPriceById(data.items, selectedProductID);
//            });
//        }
//
//
//        // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ü–µ–Ω—ã –ø–æ id
//        function findPriceById(items, id) {
//            const item = items.find(item => item.id === id);
//            return item ? item.price : undefined;
//        }

      addEquipmentBtn.onclick = async () => {
                    const payload = {
          equipment_id: parseInt(equipmentSelectEditOrderForm.value),
          quantity: parseInt(orderIdFormModal.value),
          order_id: parseInt(orderIdFormModal.value)
        };

      const res = await fetch('/api/order/add_item', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(payload)
        });
        if (res.ok) {
          alert('–ü–æ–∑–∏—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞!');
          location.reload();
        } else {
          alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏');
        }
      };


  async function deleteOrderItem(orderId, itemId) {
        if (!confirm("–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É –ø–æ–∑–∏—Ü–∏—é?")) {
        return; // –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª ¬´–û—Ç–º–µ–Ω–∞¬ª
        }
          try {
            const response = await fetch(`/api/order/${orderId}/items/${itemId}`, { method: "DELETE" });

            if (response.status === 200) {
              // –Ω–∞–ø—Ä–∏–º–µ—Ä, –±–µ–∫–µ–Ω–¥ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç JSON —Å –¥–∞–Ω–Ω—ã–º–∏ —É–¥–∞–ª—ë–Ω–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞
              const data = await response.json();
              //alert(`–û–±—ä–µ–∫—Ç "${data.name}" (ID: ${data.id}) —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω.`);
              alert(`–û–±—ä–µ–∫—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω.`);
              location.reload(); // –º–æ–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É
            }
            else if (response.status === 409) {
              const error = await response.text();
              alert(`–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å: ${error || "–µ—Å—Ç—å —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏."}`);
            }
            else {
              alert(`–û—à–∏–±–∫–∞: ${response.status} ${response.statusText}`);
            }
          }
          catch (err) {
            alert("–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: " + err.message);
          }
        };



        function closeForm() {
            const modal = document.getElementById('modalEdit');
            modal.style.display = 'none'; // –∏–ª–∏ –¥—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–± —Å–æ–∫—Ä—ã—Ç–∏—è, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        }
  //table.addEventListener("dblclick", async (e) => {
      //const row = e.target.closest("tr");
      //if (!row) return;
      //const id = row.children[0].textContent.trim();
      //const modal = document.getElementById("editModal");

      // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–∞
      //const res = await fetch(`/api/equipment/${id}`);
      //const data = await res.json();
      //document.getElementById("equipmentId").value = data.id;
      //document.getElementById("equipmentName").value = data.name;
      //document.getElementById("equipmentPrice").value = data.price;
      //modal.style.display = "block";
   // });

  //  editModal.addEventListener("submit", async (e) => {
    //    e.preventDefault();
    //    const modal = document.getElementById("editModal");
    //    const form = document.getElementById("editForm");
    //    const id = document.getElementById("equipmentId").value;
    //    const name = document.getElementById("equipmentName").value;
    //    const price = parseFloat(document.getElementById("equipmentPrice").value);
    //    await fetch(`/api/equipment/${id}`, {
    //    method: "PATCH",
    //    headers: { "Content-Type": "application/json" },
    //    body: JSON.stringify({ name, price })
    //    });
    //    closeModal(modal, form);
    //    location.reload();
    //});

  function closeModal(modal, form) {
  modal.style.display = 'none';
  form.reset();
}